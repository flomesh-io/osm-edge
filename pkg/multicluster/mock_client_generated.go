// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openservicemesh/osm/pkg/multicluster (interfaces: Controller)

// Package multicluster is a generated GoMock package.
package multicluster

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/openservicemesh/osm/pkg/apis/multicluster/v1alpha1"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// ListImportedServices mocks base method.
func (m *MockController) ListImportedServices() []*v1alpha1.ServiceImport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImportedServices")
	ret0, _ := ret[0].([]*v1alpha1.ServiceImport)
	return ret0
}

// ListImportedServices indicates an expected call of ListImportedServices.
func (mr *MockControllerMockRecorder) ListImportedServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportedServices", reflect.TypeOf((*MockController)(nil).ListImportedServices))
}
