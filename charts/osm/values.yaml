# Default values for osm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

osm:

  #
  # -- OSM control plane image parameters
  image:
    # -- Container image registry for control plane images
    registry: quay.io/flomesh
    # -- Container image pull policy for control plane containers
    pullPolicy: IfNotPresent
    # -- Container image tag for control plane images
    tag: "1.2.3"
    # -- Image name defaults
    name:
      # -- osm-controller's image name
      osmController: osm-edge-controller-ubi8
      # -- osm-injector's image name
      osmInjector: osm-edge-injector-ubi8
      # -- Sidecar init container's image name
      osmSidecarInit: osm-edge-sidecar-init-ubi8
      # -- osm-boostrap's image name
      osmBootstrap: osm-edge-bootstrap-ubi8
      # -- osm-crds' image name
      osmCRDs: osm-edge-crds-ubi8
      # -- osm-preinstall's image name
      osmPreinstall: osm-edge-preinstall-ubi8
      # -- osm-healthcheck's image name
      osmHealthcheck: osm-edge-healthcheck-ubi8
    # -- Image digest (defaults to latest compatible tag)
    digest:
      # -- osm-controller's image digest
      osmController: ""
      # -- osm-injector's image digest
      osmInjector: ""
      # -- Sidecar init container's image digest
      osmSidecarInit: ""
      # -- osm-crds' image digest
      osmCRDs: ""
      # -- osm-boostrap's image digest
      osmBootstrap: ""
      # -- osm-preinstall's image digest
      osmPreinstall: ""
      # -- osm-healthcheck's image digest
      osmHealthcheck: ""


  # -- `osm-controller` image pull secret
  imagePullSecrets: [ ]
  # -- The class of the OSM Sidecar Driver
  sidecarClass: pipy
  # -- Sidecar image for Linux workloads
  sidecarImage: ""
  # -- Sidecar drivers supported by osm-edge
  sidecarDrivers:
    - sidecarName: pipy
      # -- Sidecar image for Linux workloads
      sidecarImage: quay.io/flomesh/pipy-ubi8:0.70.0-46
      # -- Remote destination port on which the Discovery Service listens for new connections from Sidecars.
      proxyServerPort: 6060
    - sidecarName: envoy
      # -- Sidecar image for Linux workloads
      sidecarImage: envoyproxy/envoy:v1.19.3
      # -- Sidecar image for Windows workloads
      sidecarWindowsImage: envoyproxy/envoy-windows:latest
      # -- Remote destination port on which the Discovery Service listens for new connections from Sidecars.
      proxyServerPort: 15128
  # -- Curl image for control plane init container
  curlImage: quay.io/flomesh/curl-ubi8:7.84.0
  # -- Pipy repo image for Pipy sidecar's proxy control plane container
  pipyRepoImage: quay.io/flomesh/pipy-ubi8:0.70.0-46
  #
  # -- OSM controller parameters
  osmController:
    # -- OSM controller's replica count (ignored when autoscale.enable is true)
    replicaCount: 1
    # -- OSM controller's container resource parameters. See https://docs.openservicemesh.io/docs/guides/ha_scale/scale/ for more details.
    resource:
      limits:
        cpu: "1.5"
        memory: "1G"
      requests:
        cpu: "0.5"
        memory: "128M"
    # -- OSM controller's pod labels
    podLabels: { }
    # -- Enable Pod Disruption Budget
    enablePodDisruptionBudget: false
    # -- Auto scale configuration
    autoScale:
      # -- Enable Autoscale
      enable: false
      # -- Minimum replicas for autoscale
      minReplicas: 1
      # -- Maximum replicas for autoscale
      maxReplicas: 5
      cpu:
        # -- Average target CPU utilization (%)
        targetAverageUtilization: 80
      memory:
        # -- Average target memory utilization (%)
        targetAverageUtilization: 80

    ## Affinity settings for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - osm-controller
              topologyKey: kubernetes.io/hostname
            weight: 100

    # -- Node tolerations applied to control plane pods.
    # The specified tolerations allow pods to schedule onto nodes with matching taints.
    tolerations: [ ]

  #
  # -- Prometheus parameters
  prometheus:
    # -- Prometheus's container resource parameters
    resources:
      limits:
        cpu: "1"
        memory: "2G"
      requests:
        cpu: "0.5"
        memory: "512M"
    # -- Prometheus service's port
    port: 7070
    # -- Prometheus data rentention configuration
    retention:
      # -- Prometheus data retention time
      time: 15d
    # -- Image used for Prometheus
    image: quay.io/prometheus/prometheus:v2.34.0
    ## Node labels for pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: { }

    ## Affinity settings for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64
                    - arm
                    - ppc64le
                    - s390x

    # -- Node tolerations applied to control plane pods.
    # The specified tolerations allow pods to schedule onto nodes with matching taints.
    tolerations: [ ]

  # -- The trust domain to use as part of the common name when requesting new certificates.
  trustDomain: cluster.local

  certificateProvider:
    # -- The Certificate manager type: `tresor`, `vault` or `cert-manager`
    kind: tresor
    # -- Service certificate validity duration for certificate issued to workloads to communicate over mTLS
    serviceCertValidityDuration: 24h
    # -- Certificate key bit size for data plane certificates issued to workloads to communicate over mTLS
    certKeyBitSize: 2048

  #
  # -- Hashicorp Vault configuration
  vault:
    # --  Hashicorp Vault host/service - where Vault is installed
    host: ""
    # -- port to use to connect to Vault
    port: 8200
    # -- protocol to use to connect to Vault
    protocol: http
    # -- token that should be used to connect to Vault
    token: ""
    # -- Vault role to be used by Open Service Mesh
    role: openservicemesh
    # -- The Kubernetes secret storing the Vault token used in OSM. The secret must be located in the namespace of the OSM installation
    secret:
      # -- The Kubernetes secret name storing the Vault token used in OSM
      name: ""
      # -- The Kubernetes secret key with the value bring the Vault token
      key: ""

  #
  # -- cert-manager.io configuration
  certmanager:
    # --  cert-manager issuer namecert-manager issuer name
    issuerName: osm-ca
    # -- cert-manager issuer kind
    issuerKind: Issuer
    # -- cert-manager issuer group
    issuerGroup: cert-manager.io

  # -- The Kubernetes secret name to store CA bundle for the root CA used in OSM
  caBundleSecretName: osm-ca-bundle

  # -- Enable the debug HTTP server on OSM controller
  enableDebugServer: false

  # -- Enable permissive traffic policy mode
  enablePermissiveTrafficPolicy: true

  # -- Enable egress in the mesh
  enableEgress: true

  # -- Enable reconciler for OSM's CRDs and mutating webhook
  enableReconciler: false

  # -- Deploy Prometheus with OSM installation
  deployPrometheus: false

  # -- Deploy Jaeger during OSM installation
  deployJaeger: false

  # -- Identifier for the instance of a service mesh within a cluster
  meshName: osm

  # -- Log level for the proxy sidecar. Non developers should generally never set this value. In production environments the LogLevel should be set to `error`
  sidecarLogLevel: error

  # -- Proxy mode for the proxy sidecar. Acceptable values are ['Localhost', 'PodIP']
  localProxyMode: Localhost

  # -- Sets the max data plane connections allowed for an instance of osm-controller, set to 0 to not enforce limits
  maxDataPlaneConnections: 0

  # -- Sets the resync interval for regular proxy broadcast updates, set to 0s to not enforce any resync
  configResyncInterval: "90s"

  # -- Controller log verbosity
  controllerLogLevel: info

  # -- Enforce only deploying one mesh in the cluster
  enforceSingleMesh: true

  # -- Prefix used in name of the webhook configuration resources
  webhookConfigNamePrefix: osm-webhook

  # -- Namespace to deploy OSM in. If not specified, the Helm release namespace is used.
  osmNamespace: ""
  #
  # -- Remote logging parameters
  #
  # The following section configures a remote server where logging
  # data is sent to.
  remoteLogging:
    # -- Toggles Sidecar's remote logging functionality on/off for all sidecar proxies in the mesh
    enable: false
    # -- Address of the remote logging service (must contain the namespace). When left empty, this is computed in helper template to "remote-logging-service.<osm-namespace>.svc.cluster.local".
    address: ""
    # -- Port of the remote logging service
    port: 30514
    # -- Remote logging's API path where the spans will be sent to
    endpoint: ""
    # -- The authorization for remote logging service
    authorization: ""

  # -- Specifies a global list of IP ranges to exclude from outbound traffic interception by the sidecar proxy.
  # If specified, must be a list of IP ranges of the form a.b.c.d/x.
  outboundIPRangeExclusionList: [ ]

  # -- Specifies a global list of IP ranges to include for outbound traffic interception by the sidecar proxy.
  # If specified, must be a list of IP ranges of the form a.b.c.d/x.
  outboundIPRangeInclusionList: [ ]

  # -- Specifies a global list of ports to exclude from outbound traffic interception by the sidecar proxy.
  # If specified, must be a list of positive integers.
  outboundPortExclusionList: [ ]

  # -- Specifies a global list of ports to exclude from inbound traffic interception by the sidecar proxy.
  # If specified, must be a list of positive integers.
  inboundPortExclusionList: [ ]

  # -- Specifies a global list of network interface names to exclude for inbound and outbound traffic interception by the sidecar proxy.
  networkInterfaceExclusionList: [ ]

  #
  # -- OSM's sidecar injector parameters
  injector:
    # -- Sidecar injector's replica count (ignored when autoscale.enable is true)
    replicaCount: 1
    # -- Sidecar injector's container resource parameters
    resource:
      limits:
        cpu: "0.5"
        memory: "64M"
      requests:
        cpu: "0.3"
        memory: "64M"
    # -- Sidecar injector's pod labels
    podLabels: { }
    # -- Enable Pod Disruption Budget
    enablePodDisruptionBudget: false
    # -- Auto scale configuration
    autoScale:
      # -- Enable Autoscale
      enable: false
      # -- Minimum replicas for autoscale
      minReplicas: 1
      # -- Maximum replicas for autoscale
      maxReplicas: 5
      cpu:
        # -- Average target CPU utilization (%)
        targetAverageUtilization: 80
      memory:
        # -- Average target memory utilization (%)
        targetAverageUtilization: 80
    # -- Mutating webhook timeout
    webhookTimeoutSeconds: 20

    ## Node labels for pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: { }

    ## Affinity settings for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - osm-injector
              topologyKey: kubernetes.io/hostname
            weight: 100

    # -- Node tolerations applied to control plane pods.
    # The specified tolerations allow pods to schedule onto nodes with matching taints.
    tolerations: [ ]

  # -- Run init container in privileged mode
  enablePrivilegedInitContainer: false

  #
  # -- Feature flags for experimental features
  featureFlags:
    # -- Enable extra Envoy statistics generated by a custom WASM extension
    enableWASMStats: false
    # -- Enable OSM's Egress policy API.
    # When enabled, fine grained control over Egress (external) traffic is enforced
    enableEgressPolicy: true
    # -- Enable async proxy-service mapping
    enableAsyncProxyServiceMapping: false
    # -- Enables OSM's IngressBackend policy API.
    # When enabled, OSM will use the IngressBackend API allow ingress traffic to mesh backends
    enableIngressBackendPolicy: true
    # -- Enables OSM's AccessControl policy API.
    # When enabled, OSM will use the AccessControl API allow access control traffic to mesh backends
    enableAccessControlPolicy: false
    # When enabled, OSM can issue certificates for external services.
    enableAccessCertPolicy: false
    # -- Enable Sidecar active health checks
    enableSidecarActiveHealthChecks: false
    # -- Enables SnapshotCache feature for Sidecar xDS server.
    enableSnapshotCacheMode: false
    # -- Enable Retry Policy for automatic request retries
    enableRetryPolicy: false
    # -- Enable the MeshRootCertificate to configure the OSM certificate provider
    enableMeshRootCertificate: false

  # -- Node tolerations applied to control plane pods.
  # The specified tolerations allow pods to schedule onto nodes with matching taints.
  controlPlaneTolerations: [ ]

  #
  # -- OSM bootstrap parameters
  osmBootstrap:
    # -- OSM bootstrap's replica count
    replicaCount: 1
    # -- OSM bootstrap's container resource parameters
    resource:
      limits:
        cpu: "0.5"
        memory: "128M"
      requests:
        cpu: "0.3"
        memory: "128M"
    # -- OSM bootstrap's pod labels
    podLabels: { }

    ## Affinity settings for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - osm-bootstrap
              topologyKey: kubernetes.io/hostname
            weight: 100

    ## Node labels for pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: { }

    # -- Node tolerations applied to control plane pods.
    # The specified tolerations allow pods to schedule onto nodes with matching taints.
    tolerations: [ ]

  #
  # -- OSM resource validator webhook configuration
  validatorWebhook:
    # -- Name of the ValidatingWebhookConfiguration
    webhookConfigurationName: ""

  #
  # -- OSM's preinstall hook parameters

  preinstall:
    ## Affinity settings for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64
    ## Node labels for pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: { }

    # -- Node tolerations applied to control plane pods.
    # The specified tolerations allow pods to schedule onto nodes with matching taints.
    tolerations: [ ]

  cleanup:
    ## Node labels for pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: { }

    ## Affinity settings for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64

    # -- Node tolerations applied to control plane pods.
    # The specified tolerations allow pods to schedule onto nodes with matching taints.
    tolerations: [ ]



#
# -- Contour configuration
contour:
  # -- Enables deployment of Contour control plane and gateway
  enabled: false
  # -- Contour controller configuration
  contour:
    image:
      registry: ghcr.io
      repository: projectcontour/contour
      tag: v1.21.1
  # -- Contour envoy edge proxy configuration
  envoy:
    image:
      registry: docker.io
      repository: envoyproxy/envoy-distroless
      tag: v1.22.2

#
# -- SMI configuration
smi:
  # -- Enables validation of SMI Traffic Target
  validateTrafficTarget: true

#
# -- FSM configuration
fsm:
  # -- Enables deployment of fsm control plane and gateway
  enabled: false
